openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'B2B SALES'
  description: 'APi documentation for the scaled down Sysco shop'
  license :
    name : B2B sales
    url : https://dummy.com
servers :
  - url : https://dummy.com
    description: shop server
paths:
  /health/{service}:
    get:
      tags:
        - Health
      description: Checks the health of a specific service within the B2B Sales application.
      parameters:
        - in: path
          name: service
          required: true
          description: The service to be checked (e.g., "products", "orders", "users").
          schema:
            type: string
      responses:
        200:
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  service:
                    type: string
                    example: "{service}"
        404:
          description: Service not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Service '{service}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /auth/signup:
    post:
      tags:
        - Authentication
      description: Creates a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  example: "P@ssw0rd123"
      responses:
        201:
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    format: int64
                    example: 123
                  username:
                    type: string
                    example: "johndoe"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body."
        409:
          description: User already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with username '{username}' already exists."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /auth/login:
    post:
      tags:
        - Authentication
      description: Logs in a user and returns an authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "P@ssw0rd123"
      responses:
        200:
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  user_id:
                    type: integer
                    format: int64
                    example: 123
                  username:
                    type: string
                    example: "johndoe"
        400:
          description: Invalid username or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password."
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /products:
    get:
      tags:
        - Products
      description: Retrieves a list of all products.
      responses:
        200:
          description: Products retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        404:
          description: No products found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No products found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    post:
      tags:
        - Products
      description: Creates a new product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /products/{id}:
    get:
      tags:
        - Products
      description: Retrieves a specific product by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the product to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Product retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID '{id}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    put:
      tags:
        - Products
      description: Updates an existing product by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the product to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body."
        404:
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID '{id}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

    delete:
      tags:
        - Products
      description: Deletes an existing product by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the product to delete.
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Product deleted successfully.
        404:
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID '{id}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /users:
    get:
      tags:
        - Users
      description: Retrieves a list of all users.
      responses:
        200:
          description: Users retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  # Omit the 'password' field in the response:
                  properties:
                    password:
                      type: string
                      nullable: true
        404:
          description: No users found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No users found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /users/{userID}:
    get:
      tags:
        - Users
      description: Retrieves a specific user by their ID.
      parameters:
        - in: path
          name: userID
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                # Omit the 'password' field in the response:
                properties:
                  password:
                    type: string
                    nullable: true
        404:
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with ID '{userID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /orders:
    get:
      tags:
        - Orders
      description: Retrieves a list of all orders.
      responses:
        200:
          description: Orders retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: No orders found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No orders found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /orders/{orderID}:
    get:
      tags:
        - Orders
      description: Retrieves a specific order by its ID.
      parameters:
        - in: path
          name: orderID
          required: true
          description: The ID of the order to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Order retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order with ID '{orderID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    put:
      tags:
        - Orders
      description: Updates an existing order by its ID.
      parameters:
        - in: path
          name: orderID
          required: true
          description: The ID of the order to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body."
        404:
          description: Order not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order with ID '{orderID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    delete:
      tags:
        - Orders
      description: Deletes an existing order by its ID.
      parameters:
        - in: path
          name: orderID
          required: true
          description: The ID of the order to delete.
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Order deleted successfully.
        404:
          description: Order not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order with ID '{orderID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
  /carts/{userID}:
    get:
      tags:
        - Carts
      description: Retrieves all carts associated with a specific user.
      parameters:
        - in: path
          name: userID
          required: true
          description: The ID of the user whose carts to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Carts retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with ID '{userID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    post:
      tags:
        - Carts
      description: Creates a new cart for the specified user.
      parameters:
        - in: path
          name: userID
          required: true
          description: The ID of the user for whom to create the cart.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
              properties:
                cartID:
                  readOnly: true  # Server will generate the cartID
                status:
                  enum:
                    - OPENED  # New carts are always OPENED
      responses:
        201:
          description: Cart created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body."
        404:
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with ID '{userID}' not found."
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

# Have to add /files/upload/{userID} api to send files via a sftp server that gives a list of orders in json format

components:
  schemas:
    Product:
      type: object
      properties:
        productID:
          type: integer
          format: int64
          example: 123
        productName:
          type: string
          example: "Widget X"
        productPrice:
          type: number
          format: double
          example: 9.99
        productCount:
          type: integer
          format: int32
          example: 10

    User:
      type: object
      required:
        - userID
        - firstName
        - lastName
        - email
      properties:
        userID:
          type: integer
          format: int64
          description: Unique identifier for the user.
          example: 123
        firstName:
          type: string
          description: User's first name.
          example: "John"
        lastName:
          type: string
          description: User's last name.
          example: "Doe"
        email:
          type: string
          format: email
          description: User's email address, which also serves as their username.
          example: "johndoe@example.com"
        password:
          type: string
          description: Hashed password for the user account (should not be included in responses).

    Order:
      type: object
      required:
        - orderId
        - products
        - orderDate
        - totalPrice
      properties:
        orderId:
          type: integer
          format: int64
          description: Unique identifier for the order.
          example: 12345
        products:
          type: array
          description: List of products included in the order.
          items:
            $ref: '#/components/schemas/Product'
        quantities:
          type: object
          description: Map of product IDs to their respective quantities in the order.
          example:
            { 5678: 2, 9012: 1 }
        orderDate:
          type: string
          format: date-time
          description: Date and time the order was placed.
          example: "2024-01-24T14:00:00Z"
        totalPrice:
          type: number
          format: double
          description: Total price of the order (including taxes and fees).
          example: 24.99
      
    Orders:
      description: Array of order list
      type: array
      items:
        $ref: '#/components/schemas/Order'

    Cart:
      type: object
      required:
        - cartID
        - userID
        - orderIDs
        - totalAmount
        - status
      properties:
        cartID:
          type: integer
          format: int64
          description: Unique identifier for the cart.
          example: 98765
        userID:
          type: integer
          format: int64
          description: ID of the user who owns the cart.
          example: 123
        orderIDs:
          type: array
          items:
            type: integer
            format: int64
          description: List of order IDs associated with the cart.
          example: [54321, 67890]
        totalAmount:
          type: number
          format: double
          description: Total amount of all items in the cart.
          example: 49.98
        status:
          type: string
          enum:
            - OPENED
            - CHECKED_OUT
          description: Current status of the cart.
          example: OPENED

    Carts:
      description: Array of user's all carts
      type: array
      items:
        $ref: '#/components/schemas/Cart'